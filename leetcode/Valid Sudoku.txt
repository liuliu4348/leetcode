class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        int rowValid[10]={0};
        int columnValid[10]={0};
        int subBoardValid[10]={0};
        for(int i=0;i<9;i++){
            memset(rowValid,0,sizeof(rowValid));
            memset(columnValid,0,sizeof(columnValid));
            memset(subBoardValid,0,sizeof(subBoardValid));
            //第 i 个九宫格里面的第 j 个元素在原矩阵的第 3*(i/3) + j/3 行，第 3*(i%3) + j%3）
            for(int j=0;j<9;j++){
                if(!isValid(rowValid,board[i][j]-'0') || !isValid(columnValid,board[j][i]-'0') || !isValid(subBoardValid,board[3*(i/3)+j/3][3*(i%3)+j%3]-'0')){
                    return false;
                }
            }
        }
        return true;
    }
    bool isValid(int vec[],int val){
        if(val<0){
            return true;//对应的是字符‘.’
        }
        if(vec[val]==1){
            return false;
        }
        vec[val]=1;
        return true;
    }
    
};