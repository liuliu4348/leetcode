/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        vector<ListNode*> vec;
        ListNode* p=head;
        int sum=0;
        while(p!=NULL){
            vec.push_back(p);
            p=p->next;
            sum++;
        }
        if(sum==n){
            return head->next;
        }//注意这俩种情况
        if(n==1){
            vec[sum-2]->next=NULL;
        }else{
            vec[sum-n-1]->next=vec[sum-n+1];
        }
        return head;
        
    }
};
依然是双指针思想，两个指针相隔n-1，每次两个指针向后一步，当后面一个指针没有后继了，前面一个指针就是要删除的节点。空间效率高
