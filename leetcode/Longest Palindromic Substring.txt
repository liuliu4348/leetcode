class Solution {
public:
    string process(string s){
        if(s.length()==0){
            return "^$";
        }
        int i;
        string ret="^";
        for(i=0;i<s.length();i++){
            ret.push_back('#');
            ret.push_back(s[i]);
        }
        ret.push_back('#');
        ret.push_back('$');
        return ret;
    }
    string longestPalindrome(string s) {
        string s1=process(s);
        int len=s1.length();
        int c=0,r=0;
        int *p=new int[len];
        int i;
        for(i=1;i<len-1;i++){
            int i_mirror=c-(i-c);
            int diff=r-i;
            if(diff>=0){
                if(diff>p[i_mirror]){
                    p[i]=p[i_mirror];
                }else{
                    p[i]=diff;
                    while(s1[i+p[i]+1]==s1[i-p[i]-1]){
                        p[i]++;
                    }
                    c=i;
                    r=p[i]+i;
                }
            }else{
                p[i]=0;
                while(s1[i+p[i]+1]==s1[i-p[i]-1]){
                        p[i]++;
                    }
                    c=i;
                    r=p[i]+i;
            }
        }
        int maxlen=0;
        int index=0;
        for(i=1;i<len-1;i++){
            if(p[i]>maxlen){
                maxlen=p[i];
                index=i;
            }
            
        }
        return s.substr((index-maxlen-1)/2,maxlen);
    }
};